<?php
/**
 * @file
 * Manage Flipping Book packages into Drupal
 */

/**
 * Defining constants.
 */
define('FLIPPING_BOOK_DIR', 'public://flipping_book');
define('FLIPPING_BOOK_MANAGEMENT_PATH', 'admin/config/media/flipping_book');

/**
 * Implments hook_permission().
 */
function flipping_book_permission() {
  return array(
    'administer flipping_book' => array(
      'title' => t('Administer Flipping Book'),
    ),
    'manage flipping_book' => array(
      'title' => t('Manage Flipping Book'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function flipping_book_menu() {
  $module_path = drupal_get_path('module', 'flipping_book');
  $items = array();

  $items[FLIPPING_BOOK_MANAGEMENT_PATH] = array(
    'title' => 'Flipping Book',
    'description' => 'Import, delete your Flipping Books',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flipping_book_management_form'),
    'access arguments' => array('manage flipping_book'),
    'file' => 'flipping_book.pages.inc',
    'file path' => $module_path . '/includes',
  );

  $items[FLIPPING_BOOK_MANAGEMENT_PATH . '/%flipping_book/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flipping_book_delete_confirm', 4),
    'access arguments' => array('administer flipping_book'),
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'flipping_book.admin.inc',
    'file path' => $module_path . '/includes',
  );

  return $items;
}

/**
 * Loads flipping books from the database.
 *
 * This function should be used whenever you need to load more than one
 * flipping_book from the database. Flipping books are loaded into memory
 * and will not require database access if loaded again during the same page request.
 *
 * @param array $fbids
 * @return array
 *   An array of flipping books objects indexed by fbid.
 */
function flipping_book_load_multiple(array $fbids) {
  $flipping_books = array();

  foreach ($fbids as $fbid) {
    $flipping_books[$fbid] = flipping_book_load($fbid);
  }

  return $flipping_books;
}

/**
 * Load a flipping_book from the database.
 *
 * @param int $fbid
 *   The Flipping Book ID.
 *
 * @return object
 *   A fully-populated flipping_book object, or FALSE if the flipping_book
 *   is not found.
 */
function flipping_book_load($fbid) {
  $flipping_books = &drupal_static(__FUNCTION__);

  if (!isset($flipping_books[$fbid])) {
    $flipping_book = db_select('flipping_book', 'f')
      ->fields('f')
      ->condition('f.fbid', $fbid, '=')
      ->execute()
      ->fetchObject();

    if (empty($flipping_book)) {
      return FALSE;
    }

    $flipping_book->uri = FLIPPING_BOOK_DIR . '/' . $flipping_book->dir . '/index.html';
    $flipping_book->url = file_create_url($flipping_book->uri);
    $flipping_book->path = preg_replace("/^\/?/", "", parse_url($flipping_book->url, PHP_URL_PATH));

    $flipping_books[$fbid] = $flipping_book;
  }

  return $flipping_books[$fbid];
}

/**
 * Delete a flipping_book.
 *
 * @param int $fbid
 *   The Flipping Book ID.
 */
function flipping_book_delete($fbid) {
  $flipping_book = flipping_book_load($fbid);
  $path = pathinfo(drupal_realpath($flipping_book->uri), PATHINFO_DIRNAME);

  if (file_unmanaged_delete_recursive($path)) {
    $result = db_delete('flipping_book')
      ->condition('fbid', $fbid, '=')
      ->execute();
  }
  else {
    $result = FALSE;
  }

  return $result;
}

/**
 * Implements hook_views_api().
 */
function flipping_book_views_api() {
  return array(
    "api" => "3.0",
  );
}

/**
 * Implements hook_views_data().
 */
function flipping_book_views_data() {

  $data = array();

  $data['flipping_book']['table']['group'] = t('Flipping Book');
  $data['flipping_book']['table']['base'] = array(
    // This is the identifier field for the view.
    'field' => 'fbid',
    'title' => t('Flipping Book'),
    'help' => t('Flipping Book table contains data regarding Flipping Books imported into the site.'),
    'weight' => -10,
  );

  // Fbid.
  $data['flipping_book']['fbid'] = array(
    'title' => t('Fbid'),
    // The help that appears on the UI.
    'help' => t('The flipping_book ID.'),
    // Information for displaying the nid.
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    // Information for accepting a fbid as an argument.
    'argument' => array(
      'handler' => 'views_handler_argument_flipping_book_fbid',
      // The field to display in the summary.
      'name field' => 'title',
      'numeric' => TRUE,
      'validate type' => 'fbid',
    ),
    // Information for accepting a nid as a filter.
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    // Information for sorting on a nid.
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // Title.
  $data['flipping_book']['title'] = array(
    // The item it appears as on the UI.
    'title' => t('Title'),
    // The help that appears on the UI.
    'help' => t('The flipping_book title.'),
    // Information for displaying a title as a field.
    'field' => array(
      'field' => 'title',
      // The real field. This could be left out since it is the same.
      'group' => t('Flipping Book'),
      // The group it appears in on the UI. Could be left out.
      'handler' => 'views_handler_field_flipping_book',
      'click sortable' => TRUE,
      'link_to_node default' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    // Information for accepting a title as a filter.
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  // Directory.
  $data['flipping_book']['dir'] = array(
    'title' => t('Directory'),
    // The item it appears as on the UI.
    'help' => t('The flipping_book directory.'),
    // The help that appears on the UI.
    // Information for displaying a title as a field.
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    // Information for accepting a title as a filter.
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  // Created field.
  $data['flipping_book']['created'] = array(
    'title' => t('Post date'),
    // The item it appears as on the UI.
    'help' => t('The date the flipping_book was posted.'),
    // The help that appears on the UI.
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  // Define some fields based upon views_handler_field_entity in the entity
  // table so they can be re-used with other query backends.
  // @see views_handler_field_entity
  $data['flipping_book']['view_flipping_book'] = array(
    'field' => array(
      'title' => t('Link'),
      'help' => t('Provide a simple link to the flipping_book.'),
      'handler' => 'views_handler_field_flipping_book_link',
    ),
  );

  $data['flipping_book']['delete_flipping_book'] = array(
    'field' => array(
      'title' => t('Delete link'),
      'help' => t('Provide a simple link to delete the flipping_book.'),
      'handler' => 'views_handler_field_flipping_book_link_delete',
    ),
  );

  // And last but not least...a little lie ^^" forgive me.
  $data['flipping_book']['table']['entity type'] = 'node';

  return $data;
}
